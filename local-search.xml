<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>AJAX</title>
    <link href="/2022/11/18/ajax/"/>
    <url>/2022/11/18/ajax/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是AJAX"><a href="#什么是AJAX" class="headerlink" title="什么是AJAX"></a>什么是AJAX</h3><p>ajax 即“Asynchronous JavaScript and XML”（异步 JavaScript 和 XML），<br>也就是无刷新数据读取。</p><h3 id="http-请求"><a href="#http-请求" class="headerlink" title="http 请求"></a>http 请求</h3><p>首先需要了解 http 请求的方法（GET 和 POST）。</p><p>GET 用于获取数据。GET 是在 URL 中传递数据，它的安全性低，容量低。</p><p>POST 用于上传数据。POST 安全性一般，容量几乎无限。</p><h3 id="ajax-请求"><a href="#ajax-请求" class="headerlink" title="ajax 请求"></a>ajax 请求</h3><h4 id="ajax-请求一般分成-4-个步骤。"><a href="#ajax-请求一般分成-4-个步骤。" class="headerlink" title="ajax 请求一般分成 4 个步骤。"></a>ajax 请求一般分成 4 个步骤。</h4><ol><li>创建 ajax 对象</li></ol><p>  在创建对象时，有兼容问题：</p>  <figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> oAjax = <span class="hljs-keyword">new</span> <span class="hljs-type">XMLHttpRequest</span>();   <span class="hljs-comment">//for ie6 以上</span><br><span class="hljs-keyword">var</span> oAjax = <span class="hljs-keyword">new</span> <span class="hljs-type">ActiveXObject</span>(<span class="hljs-string">&#x27;Microsoft.XMLHTTP&#x27;</span>); <span class="hljs-comment">//for ie6</span><br><br><span class="hljs-comment">//合并</span><br><br><span class="hljs-keyword">var</span> oAjax = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(window.XMLHttpRequest)&#123;<br>    oAjax = <span class="hljs-keyword">new</span> <span class="hljs-type">XMLHttpRequest</span>();<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    oAjax = <span class="hljs-keyword">new</span> <span class="hljs-type">ActiveXObject</span>(<span class="hljs-string">&#x27;Microsoft.XMLHTTP&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>连接服务器</li></ol><p>  在这里会用到 open() 方法。启动一个请求以备发送。open() 方法有三个参数，</p><ul><li>第一个参数是连接方法即 GET 和 POST，</li><li>第二个参数是 URL 即所要读取数据的地址，</li><li>第三个参数是否异步，它是个布尔值，true 为异步，false 为同步。</li></ul>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">oAjax.<span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, url, <span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><blockquote><p>在open()之后、send()之前可以修改HTTP请求头信息，建议不要改变浏览器默认设置的信息，可以增加<br>  自定义的数据<br>  <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">oAjax.set<span class="hljs-constructor">RequestHeader(&#x27;<span class="hljs-params">myId</span>&#x27;,&#x27;001&#x27;)</span>;<br><br><span class="hljs-comment">//查看responseHeader</span><br>oAjax.get<span class="hljs-constructor">ResponseHeader(&#x27;<span class="hljs-params">content</span>-<span class="hljs-params">type</span>&#x27;)</span>;<br>oAjax.get<span class="hljs-constructor">AllResponseHeaders()</span><br></code></pre></td></tr></table></figure><br>3. 发送请求</p></blockquote><p>   send() 方法。</p>   <figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">oAjax.<span class="hljs-built_in">send</span>(<span class="hljs-literal">null</span>)<span class="hljs-comment">;</span><br>//如果不需要传送数据，则必须放置<span class="hljs-literal">null</span>。因为部分浏览器要求必须要加<span class="hljs-literal">null</span>。<br></code></pre></td></tr></table></figure><p>   如果您希望通过 GET 方法发送信息，请向 URL 添加信息<br>   但是url加的查询字符串必须使用 encodeURICompent()进行编码才能加入。</p>   <figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addURLParam</span>(<span class="hljs-params">url,name,value</span>) </span>&#123;<br>    <span class="hljs-built_in">url</span>+=(<span class="hljs-built_in">url</span>.indexOf(<span class="hljs-string">&quot;?&quot;</span>)==<span class="hljs-number">-1</span>)?<span class="hljs-string">&quot;?&quot;</span>:<span class="hljs-string">&quot;&amp;&quot;</span>;<br>    <span class="hljs-built_in">url</span>+=<span class="hljs-built_in">encodeURIComponent</span>(name)+<span class="hljs-string">&quot;=&quot;</span>+<span class="hljs-built_in">encodeURIComponent</span>(value);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">url</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>   将请求发送到服务器。<br>   string：仅用于 POST 请求</p>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">oAjax.send<span class="hljs-params">(&#x27;<span class="hljs-attr">fname</span>=Bill&amp;<span class="hljs-attr">lname</span>=Gates)</span>;<br></code></pre></td></tr></table></figure><p>   如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。<br>   然后在 send() 方法中规定您希望发送的数据(表单数据封装格式和GET提交数据格式相同)：<br>   <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">oAjax.send($(<span class="hljs-string">&#x27;#myform&#x27;</span>).serialize());<br></code></pre></td></tr></table></figure></p>   <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">xmlhttp.<span class="hljs-keyword">open</span>(<span class="hljs-string">&quot;POST&quot;</span>,<span class="hljs-string">&quot;ajax_test.asp&quot;</span>,<span class="hljs-literal">true</span>);<br>xmlhttp.set<span class="hljs-constructor">RequestHeader(<span class="hljs-string">&quot;Content-type&quot;</span>,<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>)</span>;<br>xmlhttp.send(<span class="hljs-string">&quot;fname=Bill&amp;lname=Gates&quot;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>send()请求是同步的，意味着后续的js代码必须等到服务器响应之后才继续执行。所以在收到响应后，<br>   响应的数据会自动填充到XHR对象的属性。</p></blockquote><ol start="4"><li><p>接收返回值</p><p> XHR对象接受的属性有：</p><ul><li>responseText</li><li>responseXML 如果响应的内容类型是”text/xml”或”application/xml”，则该属性值为XML DOM文档。</li><li>status</li><li>statusText</li></ul></li></ol><p>   onreadystatechange 事件。当请求被发送到服务器时，我们需要执行一些基于响应的任务。<br>   每当 readyState 改变时，就会触发 onreadystatechange 事件。</p><p>   readyState：请求状态，返回的是整数（0-4）。</p><p>   0（未初始化）：还没有调用 open() 方法。</p><p>   1（载入）：已调用 send() 方法，正在发送请求。</p><p>   2（载入完成）：send() 方法完成，已收到全部响应内容。</p><p>   3（解析）：正在解析响应内容。</p><p>   4（完成）：响应内容解析完成，可以在客户端调用。</p><p>   status：请求结果，返回 200 或者 404。</p><p>   200 =&gt; 成功。</p><p>   304 =&gt; 请求的资源并没有被修改，可以直接使用浏览器中缓存的版本。</p><p>   404 =&gt; 失败。</p><p>   responseText：返回内容，即我们所需要读取的数据。需要注意的是：responseText 返回的是字符串。</p><pre><code class="hljs"><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros">oAjax.<span class="hljs-attribute">onreadystatechange</span>=function()&#123;<br>    <span class="hljs-keyword">if</span>(oAjax.<span class="hljs-attribute">readyState</span>==4)&#123;<br>        <span class="hljs-keyword">if</span>(oAjax.status&gt;=200 &amp;&amp; oAjax.status&lt;300 || oAjax.<span class="hljs-attribute">status</span>==304)&#123;<br>            fnSucc(oAjax.responseText);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(fnFaild)&#123;<br>                fnFaild();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></code></pre><h3 id="XMLHttpRequest-2"><a href="#XMLHttpRequest-2" class="headerlink" title="XMLHttpRequest 2"></a>XMLHttpRequest 2</h3><ol><li><p>formdata</p> <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> form=$(<span class="hljs-string">&#x27;#myform&#x27;</span>)[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">var</span> formdata=<span class="hljs-keyword">new</span> FormData(form);<br>formdata.append(<span class="hljs-string">&#x27;from&#x27;</span>,<span class="hljs-string">&#x27;lzhan.com&#x27;</span>);<br>formdata.set(<span class="hljs-string">&#x27;from&#x27;</span>,<span class="hljs-string">&#x27;163.com&#x27;</span>);<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(formdata.get(<span class="hljs-string">&#x27;from&#x27;</span>));<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(formdata.get(<span class="hljs-string">&#x27;id&#x27;</span>));<br>formdata.forEach(<span class="hljs-keyword">function</span> (<span class="hljs-params">value,key</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(value);<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>超时设定</p> <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">oAjax.timeout<span class="hljs-operator">=</span><span class="hljs-number">3000</span><span class="hljs-comment">;</span><br>    oAjax.ontimeout<span class="hljs-operator">=</span>function () &#123;<br><br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li><p>下载进度事件</p> <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">var pro=document.query<span class="hljs-constructor">Selector(&#x27;#<span class="hljs-params">loadProgress</span>&#x27;)</span>;<br>                oAjax.onprogress=<span class="hljs-keyword">function</span> (e) &#123;<br>                    pro.set<span class="hljs-constructor">Attribute(&#x27;<span class="hljs-params">max</span>&#x27;,<span class="hljs-params">parseInt</span>(<span class="hljs-params">e</span>.<span class="hljs-params">totalSize</span>)</span>);<br><br>                    <span class="hljs-keyword">if</span>(e.lengthComputable)&#123;<br>                        pro.set<span class="hljs-constructor">Attribute(&#x27;<span class="hljs-params">value</span>&#x27;,<span class="hljs-params">e</span>.<span class="hljs-params">position</span>)</span>;<br><br>                    &#125;<br>                &#125;<br></code></pre></td></tr></table></figure><blockquote><p>progess事件会在接受数据期间周期性触发。</p></blockquote></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/05/hello-world/"/>
    <url>/2022/11/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
